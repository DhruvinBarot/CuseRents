# Generated by Django 5.0.1 on 2025-10-25 18:14

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Bundle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Bundle name (e.g., 'Photography Starter Kit')", max_length=200)),
                ('description', models.TextField(help_text="Description of what's included")),
                ('discount_percent', models.IntegerField(default=10, help_text='Discount percentage (5-50%)', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(50)])),
                ('is_active', models.BooleanField(default=True, help_text='Whether bundle is currently available')),
                ('total_bookings', models.IntegerField(default=0, help_text='Number of times this bundle was booked')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(help_text='User who created this bundle', on_delete=django.db.models.deletion.CASCADE, related_name='bundles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'bundles',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Item title/name', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the item')),
                ('category', models.CharField(choices=[('tools', 'Tools & Hardware'), ('electronics', 'Electronics'), ('camera', 'Camera & Photography'), ('sports', 'Sports & Outdoors'), ('kitchen', 'Kitchen & Appliances'), ('party', 'Party & Events'), ('furniture', 'Furniture'), ('books', 'Books & Media'), ('other', 'Other')], help_text='Item category', max_length=20)),
                ('price_per_hour', models.DecimalField(decimal_places=2, help_text='Rental price per hour', max_digits=6, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('price_per_day', models.DecimalField(blank=True, decimal_places=2, help_text='Rental price per day (optional)', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('deposit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Security deposit amount', max_digits=6, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('address_text', models.CharField(help_text='Full address text', max_length=300)),
                ('google_place_id', models.CharField(blank=True, help_text='Google Places API place ID', max_length=100)),
                ('lat', models.FloatField(help_text='Latitude coordinate', validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('lng', models.FloatField(help_text='Longitude coordinate', validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('photo_url', models.URLField(help_text='Cloudinary URL for main photo')),
                ('additional_photos', models.JSONField(blank=True, default=list, help_text='Array of additional photo URLs')),
                ('is_available', models.BooleanField(default=True, help_text='Whether item is currently available for rent')),
                ('carbon_offset_kg', models.IntegerField(default=5, help_text='Estimated CO2 saved per rental (in kg)', validators=[django.core.validators.MinValueValidator(0)])),
                ('total_rentals', models.IntegerField(default=0, help_text='Total number of times rented')),
                ('rating_avg', models.FloatField(default=5.0, help_text='Average rating for this item', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('total_ratings', models.IntegerField(default=0, help_text='Total number of ratings')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(help_text='User who owns this item', on_delete=django.db.models.deletion.CASCADE, related_name='items', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'items',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BundleItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1, help_text='Number of this item in the bundle', validators=[django.core.validators.MinValueValidator(1)])),
                ('bundle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bundle_items', to='items.bundle')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bundle_items', to='items.item')),
            ],
            options={
                'db_table': 'bundle_items',
            },
        ),
        migrations.AddField(
            model_name='bundle',
            name='items',
            field=models.ManyToManyField(help_text='Items included in this bundle', related_name='bundles', through='items.BundleItem', to='items.item'),
        ),
        migrations.CreateModel(
            name='ItemVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_url', models.URLField(help_text='Cloudinary URL for video file')),
                ('thumbnail_url', models.URLField(help_text='Cloudinary URL for video thumbnail')),
                ('duration_seconds', models.IntegerField(help_text='Video duration in seconds (max 2 minutes)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(120)])),
                ('title', models.CharField(default='How to use this item', help_text='Video title', max_length=100)),
                ('view_count', models.IntegerField(default=0, help_text='Number of times video was viewed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('item', models.ForeignKey(help_text='Item this video belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='items.item')),
            ],
            options={
                'db_table': 'item_videos',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['lat', 'lng'], name='items_lat_03d692_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['category'], name='items_categor_694f25_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['is_available'], name='items_is_avai_2577f6_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['-created_at'], name='items_created_1ba901_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='bundleitem',
            unique_together={('bundle', 'item')},
        ),
    ]
