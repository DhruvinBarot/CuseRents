# Generated by Django 5.0.1 on 2025-10-25 17:54

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, help_text="User's phone number for contact", max_length=15)),
                ('lat', models.FloatField(blank=True, help_text='Latitude coordinate', null=True, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('lng', models.FloatField(blank=True, help_text='Longitude coordinate', null=True, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('address_text', models.CharField(blank=True, help_text="User's primary address", max_length=300)),
                ('rating_avg', models.FloatField(default=5.0, help_text='Average rating as an item owner', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('total_ratings', models.IntegerField(default=0, help_text='Total number of ratings received')),
                ('co2_saved_kg', models.IntegerField(default=0, help_text='Total CO2 saved through rentals (in kg)')),
                ('phone_verified', models.BooleanField(default=False, help_text='Whether phone number is verified')),
                ('email_verified', models.BooleanField(default=False, help_text='Whether email is verified')),
                ('id_verified', models.BooleanField(default=False, help_text='Whether ID document is verified')),
                ('bio', models.TextField(blank=True, help_text='User bio/description', max_length=500)),
                ('profile_photo', models.URLField(blank=True, help_text='Cloudinary URL for profile photo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['lat', 'lng'], name='users_lat_be1f72_idx'), models.Index(fields=['email'], name='users_email_4b85f2_idx'), models.Index(fields=['phone'], name='users_phone_af6883_idx')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
